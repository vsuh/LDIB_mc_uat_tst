def cmdString // global variable
def ib = env.JOB_BASE_NAME
def CLADDR
def CLPORT
def SCRIPT
// def clstID
// def ibID

pipeline {
  options { timestamps() }
  agent { label 'obr-app-10' }
  stages {
    stage ( 'stage 1. Подготовка среды') {
      options {
        timeout(time: 1, unit: 'MINUTES')
      }
      steps {
        script {
          echo '*** Инициализация среды и библиотек'
          load './lib/SetEnvironment.groovy'
          Common =  load './lib/Common.groovy'
          DB = load './lib/DBManage.groovy'
        }
      }
    }
    stage ('stage 2. Подготовка ИБ') {
      agent {
        label 'obr-app-10'
      }
      options {
        timeout(time: 2, unit: 'MINUTES')
      }
        steps {
        script {
          echo '*** Инициализация среды и библиотек '
          myENV   = load './lib/SetEnvironment.groovy'
          Common  = load './lib/Common.groovy'
          DB      = load './lib/DBManage.groovy'
          CLADDR  = env.JN_tst_RAS_HOST
          CLPORT  = env.JN_tst_RAS_PORT
          SCRIPT = "${env.WORKSPACE}/SQLscript.txt"

          // echo '*** Блокирование ИБ "' + ib + '", отключение сеансов ' + Common.TimeNow()
          // echo '+++++++++++++++++++++++++++++++++++ ' + Common.addMinutes(Common.TimeNow(), 5)
          // echo '################################### ' + Common.formatDate(Common.addMinutes(Common.TimeNow(), 5))

          message = "Производится загрузка ИБ ${ib} из резервной копии"
          timeout(time: 3, unit: 'MINUTES') {
          withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
              ,usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def clstID = DB.clusterIdentifierFromRAS(CLADDR, CLPORT, env.JN_tst_CLUSTER_1C_HOST)
            def ibID = DB.databaseIdentifierFromRAS(CLADDR, CLPORT, clstID, ib, clADMIN, clPASSWD)
            DB.deleteConnectionsIBbyID(CLADDR, CLPORT, clstID, ibID, clADMIN, clPASSWD)
            DB.lockIBbyID(CLADDR, CLPORT, clstID, clADMIN, clPASSWD, ibID, ibADMIN, ibPASSWORD, message, "0008")
          }
          }
        echo "[[[[[[[[[[[[[[[[[[[clstID: ${clstID} ]]]]]]]]]]]]]] RAC = ${env.JN_RAC} ]]]]]]]]]]]]]"
        }
      }
    }
    stage( 'stage 3. формирование скрипта загрузки') {
      agent {
          label 'obr-app-10'
      }
      options {
        timeout(time: 2, unit: 'MINUTES')
      }
      steps {script{
        cmdString = "${env.WORKSPACE}/sql_script.txt"
        Common.cmd("dir ./testIB-restore-sql/*.*")
        echo '*** запуск `oscript make_sql_script.os` ${env.WORKSPACE}'
        Common.cmd('oscript ./testIB-restore-sql/create-script.os mc_uat_tst mc_uat ${cmdString}')
        Common.cmd('type ${cmdString}')
      }}
    }
    stage( 'stage 4. загрузка бэкапа в ИБ') {
      agent {
          label 'obr-app-10'
      }
      options {
        timeout(time: 4, unit: 'HOURS')
      }
      steps {
        echo '*** выполнение скрипта `sqlcmd ${cmdString}` :::: ' + '"' + cmdString + '"'
      }
    }
  }
  // post {
  //    always { script {
  //       echo '+++ снятие блокировки с ИБ'

  //       myENV   = load './lib/SetEnvironment.groovy'
  //       withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
  //           ,usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
  //       //            bat('deployka session help')
  //           DB.unlockIBbyID(CLADDR, CLPORT, clstID, clADMIN, clPASSWD, ibID, ibADMIN, ibPASSWORD)
  //       }
  //   }}
  // }
}
