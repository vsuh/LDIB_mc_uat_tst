
pipeline {
  agent{ label 'mini'}
  options { timestamps () }
  environment {
    LIB = load 'lib/Common.groovy'
    ib = "${JOB_BASE_NAME}"
    tb = "${ib[0..5]}"
    IbTitle = LIB.strIbTitle(ib)
    cs = 'lib/create-script.os'
    CLADDR = 'obr-app-13'
    SQLSRV = 'obr-sql-01'
    SQLbackup = '\\\\192.168.3.56\\backup'
    VER1C = '8.3.18.1483'
    enCode = '0008'
    scPath = "${env.WORKSPACE}/SQL_${ib}.SQLscript"
    executionCancelled = false
  }
  stages {
    stage('0. Разрешение запуска'){
      steps{
        script {
          def runningUser = currentBuild.rawBuild.getCause(Cause.UserIdCause)
          if (null == runningUser) { // scheduled job launch
            def isBatDeny = bat(script: "@curl --silent -X GET http://mysql:8000/q/${JOB_BASE_NAME}", returnStdout: true)
            if (isBatDeny != "on") {
              echo "Сборка `${JOB_BASE_NAME}` отменена: в http://mysql:8000 (${isBatDeny}). Успешное завершение."
              executionCancelled = true
              currentBuild.getRawBuild().getExecutor().interrupt(Result.SUCCESS)
//              stepErrors.stage0 = "Выполнение pipeline отменено (${isBatDeny}) и АВТОЗАПУСК"
            }
          } 
        }
      }
    }
    stage('1. Подготовка (Блокирование ИБ, отключение сеансов)') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step skipped by setting cancel"
            return
          }
	        echo "Проверка наличия oscript.exe в PATH"
          try {
            bat "OSCRIPT.exe>nul"
          } catch (e) {
            currentBuild.result = 'ABORTED'
            error("Не удалось найти OSCRIPT.exe: "+ e.toString())
          }
          bat "chcp 65001>nul\nif not exist log md log"
          withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session kill --ras ${CLADDR}
                --cluster-admin ${clADMIN} --cluster-pwd ${clPASSWD}
                --ibconnection /s${CLADDR}\\${ib}
                --db ${ib} --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
                --uccode ${enCode} --v8version ${VER1C}
                """.replaceAll( /\n\s*/, " " )

          bat "echo "+ command + " > log\\COMMAND.1.txt"
          echo "command: " + command
          // def TIMES = [mc_bnu: 7200, mc_zup: 3600, mc_uat: 600, mc_zup_111: 3600]
          def timeoutValue = ["mc_bnu": 7200, "mc_zup": 3600, "mc_uat": 600][tb]

          timeout (time: timeoutValue, units: "SECONDS") {
            bat """chcp 65001
              ${ command } """
          }
          }
        }
      }
    }
    stage('2. Подключение каталога с бэкапами') {
      steps {
        timeout(time: 1, unit: 'MINUTES') {
          script {
          if (executionCancelled == true) {
              echo "step skipped by setting cancel"
              return
            }
            withCredentials([usernamePassword(credentialsId: 'goblin_moscollector', passwordVariable: 'passwd', usernameVariable: 'user')]) {

              RC = bat returnStatus: true, script: """ chcp 65001 \n net use ${SQLbackup} /delete """
              RETURN_STATUS = bat returnStatus: true, script: """ chcp 65001 \n net use ${SQLbackup} """
              
              if ( RETURN_STATUS > 0 ) {
                  echo "unsuccessful mapping, try with password. Previous retuned: " + RETURN_STATUS
                  RC = bat returnStatus: true, script: """ chcp 65001 \n net use ${SQLbackup} ${passwd} /user:${user} """
              }
            }
          }
        }
      }
    }
    stage ('3. Формирование скрипта загрузки') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step skipped by setting cancel"
            return
          }
           def command = "oscript ${cs} ${ib} ${tb} ${scPath}"
           echo "command: " + command

          bat "echo "+ command + " > log\\COMMAND.3.txt"
          timeout(10) {
            bat """chcp 65001
                ${ command } """
          }
        }
      }
    }
    stage ('4. Загрузка ИБ из бэкапа') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step skipped by setting cancel"
            return
          }

          withCredentials([usernamePassword(credentialsId: 'SQLadmin', passwordVariable: 'SQLpasswd', usernameVariable: 'SQLadmin')]) {
            def command = "sqlcmd -S ${SQLSRV} -U ${SQLadmin} -P ${SQLpasswd} -i \"${scPath}\" -o log\\COMMAND.4.out"
            echo "command: " + command
            bat "echo "+ command + " > log\\COMMAND.4.txt"
            bat """chcp 65001
            ${ command } """

            def log_cmd = "curl --silent http://tb/log/${ib}"
            echo "Регистрация загрузки: $log_cmd"
            bat "$log_cmd"
          }
        }
      }
    }
    stage ('5. Установка константы заголовок ИБ') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step skipped by setting cancel"
            return
          }
          withCredentials([usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """if exist lib\\УстановкаЗаголовкаКопииИБ.epf ( vrunner run 
                --command \"${IbTitle}\"
                --ibconnection /s${CLADDR}\\${ib}
                --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
                --uccode ${enCode} --v8version ${VER1C}
                --execute lib\\УстановкаЗаголовкаКопииИБ.epf ) ELSE ( echo Не обнаружен файл обработки lib\\УстановкаЗаголовкаКопииИБ.epf)
                """.replaceAll( /\n\s*/, " " )
            echo "command: " + command
            bat "echo "+ command + " > log\\COMMAND.5.txt"
            timeout(10) {
                bat """chcp 65001
                ${ command } """
            }
          }
        }
      }
    }
  }
    post {
    always { script {
        withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session unlock
            --ras ${CLADDR}
            --cluster-admin ${ clADMIN }
            --cluster-pwd ${ clPASSWD }
            --ibconnection /s${CLADDR}\\${ ib }
            --db ${ ib } --db-user ${ ibADMIN }
            --db-pwd ${ ibPASSWORD }
            --uccode ${ enCode }
            --v8version ${ VER1C }
            """.replaceAll( /\n\s*/, " " )


            echo "command: " + command

            bat "echo "+ command + " > log\\COMMAND.P.txt"

            bat """chcp 65001>nul
                $command"""
      }
    }}
  }
}
