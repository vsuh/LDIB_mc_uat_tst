String msg_ERR = ""
String NOTE = ""

pipeline {
  agent{ label 'mini'}
  options { timestamps () }
  environment {
//    notifyToken = '2djDy2SkydHJ-pE1b1cp5QaBy73yGPXx'
    LIB = load 'lib/Common.groovy'
    ib = "${JOB_BASE_NAME}"
    tb = "${ib[0..5]}"
    IbTitle = LIB.strIbTitle(ib)
    cs = 'lib/create-script.os'
    CLADDR = 'lob-1c-test'
    SQLSRV = 'lob-1c-test'
    SQLbackup = '\\\\192.168.3.56\\backup'
    VER1C = '8.3.18.1483'
    enCode = '0008'
    scPath = "${env.WORKSPACE}/log/SQL_${ib}.SQLscript"
    executionCancelled = false
  }
  stages {
    stage('0. Разрешение запуска'){
      steps{
        script {
          currentBuild.result = 'ABORTED'
          return
          def runningUser = currentBuild.rawBuild.getCause(Cause.UserIdCause)
          if (null == runningUser) { // scheduled job launch
            def isBatDeny = bat(script: "@curl --silent -X GET http://mysql:8000/q/${JOB_BASE_NAME}", returnStdout: true)
            if (isBatDeny != "on") {
              echo "Сборка `${JOB_BASE_NAME}` отменена: в http://mysql:8000 (${isBatDeny}). Успешное завершение."
              executionCancelled = true
              currentBuild.getRawBuild().getExecutor().interrupt(Result.SUCCESS)
//              stepErrors.stage0 = "Выполнение pipeline отменено (${isBatDeny}) и АВТОЗАПУСК"
            }
          } 
        }
      }
    }
    stage('1. Подготовка (Блокирование ИБ, отключение сеансов)') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step 1 skipped by setting cancel"
            return
          }
	        echo "Проверка наличия oscript.exe в PATH"
          try {
            bat "OSCRIPT.exe>nul"
          } catch (e) {
            currentBuild.result = 'ABORTED'
            msg_ERR = msg_ERR + "\n0. Не удалось найти OSCRIPT.exe - ABORT"
            error("Не удалось найти OSCRIPT.exe: "+ e.toString())
          }
          bat "chcp 65001>nul\nif not exist log md log"
          withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session kill --ras ${CLADDR}
                --cluster-admin ${clADMIN} --cluster-pwd ${clPASSWD}
                --ibconnection /s${CLADDR}\\${ib}
                --db ${ib} --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
                --uccode ${enCode} --v8version ${VER1C}
                """.replaceAll( /\n\s*/, " " )

            bat "echo "+ command + " > log\\COMMAND.1.txt"
            
            timeout (time: 90, units: "SECONDS") {
              Exception caughtException = null
              catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
                try {
                  bat "chcp 65001>nul\n${ command }"
                  } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                    msg_ERR = msg_ERR + "\n1. Блокировка ИБ - ${e.toString()}"
                    error "Caught ${e.toString()}"
                  } catch (Throwable e) {
                    caughtException = e
                  }
                }
                if (caughtException) {
                  msg_ERR = msg_ERR + "\n1. Блокировка ИБ - ${e.toString()}"
                  error caughtException.message
              }
            }
          }
        }
      }
    }
    stage('2. Подключение каталога с бэкапами') {
      steps {
        timeout(time: 1, unit: 'MINUTES') {
          script {
          if (executionCancelled == true) {
              echo "step 2 skipped by setting cancel"
              return
            }
            withCredentials([usernamePassword(credentialsId: 'goblin_moscollector', passwordVariable: 'passwd', usernameVariable: 'user')]) {

              RC = bat returnStatus: true, script: """ chcp 65001>nul\nnet use ${SQLbackup} /delete """
              RETURN_STATUS = bat returnStatus: true, script: """ chcp 65001>nul\nnet use ${SQLbackup} """
              
              if ( RETURN_STATUS > 0 ) {
                  echo "unsuccessful mapping, try with password. Previous retuned: " + RETURN_STATUS
                  RC = bat returnStatus: true, script: """ chcp 65001>nul\nnet use ${SQLbackup} ${passwd} /user:${user} """
              }
            }
          }
        }
      }
    }
    stage ('3. Формирование скрипта загрузки') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step 3 skipped by setting cancel"
            return
          }
           def command = "oscript ${cs} ${ib} ${tb} ${scPath}"

          bat "echo "+ command + " > log\\COMMAND.3.txt"
          msg_ERR = msg_ERR + "\nФормирование скрипта - TIMEOUT"
          timeout(10) {
            Exception caughtException = null
            catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
              try {
                bat "chcp 65001>nul\n${ command }"
              } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                msg_ERR = msg_ERR + "\n3. Формирование скрипта - ${e.toString()}"
                error "Caught ${e.toString()}"
              } catch (Throwable e) {
                caughtException = e
              }
            }
            if (caughtException) {
                msg_ERR = msg_ERR + "\n3. Формирование скрипта - ${e.toString()}"
                error caughtException.message
            }
          }
        }
      }
    }
    stage ('4. Загрузка ИБ из бэкапа') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step 4 skipped by setting cancel"
            return
          }
          def timeoutValue = ["mc_bnu": 7200, "mc_zup": 3600, "mc_uat": 720][tb]
          msg_ERR = msg_ERR + "\nЗагрузка ИБ - TIMEOUT"
          timeout (time: timeoutValue, units: "SECONDS") {
              Exception caughtException = null
              catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
                try {
                  withCredentials([usernamePassword(credentialsId: 'SQLadmin', passwordVariable: 'SQLpasswd', usernameVariable: 'SQLadmin')]) {
                    def command = "sqlcmd -S ${SQLSRV} -U ${SQLadmin} -P ${SQLpasswd} -i \"${scPath}\" -o log\\COMMAND.4.out"
                    bat "echo "+ command + " > log\\COMMAND.4.txt"
                    bat "chcp 65001>nul\n${ command }"
                  }
              } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                msg_ERR = msg_ERR + "\n4. Загрузка ИБ - ${e.toString()}"
                error "Caught ${e.toString()}"
              } catch (Throwable e) {
                caughtException = e
              }
            }
            if (caughtException) {
                msg_ERR = msg_ERR + "\n4. Загрузка ИБ - ${e.toString()}"
                error caughtException.message
            }
          }
        }
      }
    }
    stage ('5. Установка константы заголовок ИБ') {
      steps {
        script {
          if (executionCancelled == true) {
            echo "step 5 skipped by setting cancel"
            return
          }
          withCredentials([usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """if exist lib\\УстановкаЗаголовкаКопииИБ.epf ( vrunner run 
                --command \"${IbTitle}\"
                --ibconnection /s${CLADDR}\\${ib}
                --ordinaryapp 1
                --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
                --uccode ${enCode} --v8version ${VER1C}
                --execute lib\\УстановкаЗаголовкаКопииИБ.epf ) ELSE ( echo Не обнаружен файл обработки lib\\УстановкаЗаголовкаКопииИБ.epf)
                """.replaceAll( /\n\s*/, " " )
          
            bat "echo "+ command + " > log\\COMMAND.5.txt"
            // msg_ERR = msg_ERR + "\nУстановка заголовка - TIMEOUT"
            timeout(3) {
              Exception caughtException = null
              catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
                try {
                  bat "chcp 65001>nul\n${ command }"
                } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                  msg_ERR = msg_ERR + "\n5. Установка заголовка - ${e.toString()}"
                  error "Caught ${e.toString()}"
                } catch (Throwable e) {
                  caughtException = e
                }
              }
              if (caughtException) {
                  msg_ERR = msg_ERR + "\n5. Установка заголовка - ${e.toString()}"
                  error caughtException.message
              }

            }
          }
        }
      }
    }
  }
  post {
    unsuccessful{
      script {
        int msg_len_limit = 1024
        String log = msg_ERR.length() <= msg_len_limit ? msg_ERR : '...'+msg_ERR.substring(msg_ERR.length() - msg_len_limit)
        String msg = """<b>${BUILD_DISPLAY_NAME}</b> Загрузка <b>${JOB_BASE_NAME}</b> 
        завершена с ошибками
        <i>${NOTE}</i> (${currentBuild.durationString}) [${currentBuild.result}]
        ${BUILD_URL}console\n""" + log

        echo msg

        withCredentials([string(credentialsId: 'tgNotifyEvents', variable: 'NE_token')]) {
          notifyEvents message: msg,
            token: NE_token, 
            title: "<b>${ib}</b> Неудача", 
            level: "error"
        }
      }
    }
  cleanup { script {
      if (executionCancelled == true) {
        echo "step `cleanup` skipped by setting cancel (${executionCancelled})"
      }else{
      withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
          , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
          def command = """vrunner session unlock
          --ras ${CLADDR}
          --cluster-admin ${ clADMIN }
          --cluster-pwd ${ clPASSWD }
          --ibconnection /s${CLADDR}\\${ ib }
          --db ${ ib } --db-user ${ ibADMIN }
          --db-pwd ${ ibPASSWORD }
          --uccode ${ enCode }
          --v8version ${ VER1C }
          """.replaceAll( /\n\s*/, " " )

          bat "echo "+ command + " > log\\COMMAND.P.txt"

          bat """chcp 65001>nul\n$command"""
      }
    }
  }}
  }
}
