#! / progra ~ 2 / OneScript / bin / oscript . exe - encoding = utf8
// Вызов:                                                                                             VSCraft@2022
// > oscript path\full_rights.os ИБ [0/1]
// где:
//      ИБ - имя ИБ из файла ibs.json
// второй параметр переопределяет переменную `УбратьПолныеПрава` "0" - Истина, любое другое - Ложь
Перем имяФайлаПодрядчиков; // имя файла с параметрами
Перем УбратьПолныеПрава; // флаг: установить или убрать "ПолныеПрава" у пользователей

Функция ПрочитатьПараметры(Отказ)
	Если АргументыКоманднойСтроки.Количество() = 0 Тогда
		Сообщить("### Требуется параметр в строке вызова");
		Отказ = Истина;
	Иначе
		ИмяИБ = АргументыКоманднойСтроки[0];
	КонецЕсли;
	Если АргументыКоманднойСтроки.Количество() = 2 Тогда
		Если АргументыКоманднойСтроки[1] = "0" Тогда
			УбратьПолныеПрава = Истина;
		Иначе
			УбратьПолныеПрава = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИмяАдминистратораИБ = ПолучитьПеременнуюСреды("ibADMIN");
	ПарольАдминистратора = ПолучитьПеременнуюСреды("ibPASSWORD");
	Если ПустаяСтрока("" + ИмяАдминистратораИБ + ПарольАдминистратора) Тогда
		Сообщить("### Не определены переменные среды ""ibADMIN"" или ""ibPASSWORD""");
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьПараметрыИБ(ИмяИБ, Отказ);
	Если Отказ Тогда
		Сообщить("### Отказ А1");
		Возврат Неопределено;
	КонецЕсли;
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Сервер", СтруктураПараметров["Сервер"]);
	СтруктураРезультат.Вставить("ИБ", СтруктураПараметров["ИБ"]);
	СтруктураРезультат.Вставить("Имя", ИмяАдминистратораИБ);
	СтруктураРезультат.Вставить("Пароль", ПарольАдминистратора);
	СтруктураРезультат.Вставить("Подрядчики", СтруктураПараметров["users"]);
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ПолучитьПараметрыИБ(ИмяИБ, Отказ)
	Если ПустаяСтрока(имяФайлаПодрядчиков) Тогда
		Message("### Не определено имя файла параметров");
	КонецЕсли;
	ФайлПроверки = Новый Файл(имяФайлаПодрядчиков);
	Если НЕ ФайлПроверки.Существует() Тогда
		Message("### Не найден файл параметров " + ФайлПроверки.ПолноеИмя);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяИБ) Тогда
		Сообщить("Передан пустой параметр ""ИмяИБ""");
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Сообщить("### Отказ А0");
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеДж = Новый ЧтениеJSON;
	ЧтениеДж.ОткрытьФайл(имяФайлаПодрядчиков);
	
	Попытка
		ПараметрыИзФайлаНастроек = ПрочитатьJSON(ЧтениеДж, Истина);
		СтруктураНастроекИБ = ПараметрыИзФайлаНастроек["ibs"][ИмяИБ];
	Исключение
		Сообщить("### Ошибка десериализации данных из файла " + имяФайлаПодрядчиков + Символы.ПС + ОписаниеОшибки());
		ЧтениеДж.Закрыть();
	КонецПопытки;
	
	ЧтениеДж.Закрыть();
	Если СтруктураНастроекИБ = Неопределено
		ИЛИ СтруктураНастроекИБ["users"].Количество() = 0 Тогда
		Сообщить("В файле настроек для ИБ '" + ИмяИБ + "' пустой список подрядчиков");
	КонецЕсли;
	
	Возврат СтруктураНастроекИБ;
КонецФункции

Процедура ПредоставитьПолныеПрава(СтруктураПараметров, Отказ)
	Перем ЭтоУАТ;
	ЭтоУАТ = Ложь;
	Если Отказ Тогда
		Сообщить("### Отказ А2");
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		Сообщить("### Параметры не получены");
	КонецЕсли;
	текИБ = ПолучитьСоединение(СтруктураПараметров);
	ЗаголовокИБ = ПолучитьПеременнуюСреды("IbTitle");
	Если ПустаяСтрока(ЗаголовокИБ) Тогда
		ЗаголовокИБ = "Копия ИБ";
	КонецЕсли;
	СтрокаЗаголовка = "" + ЗаголовокИБ + " от " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	Сообщить("### Устанавливаю константу ЗаголовокСистемы: " + СтрокаЗаголовка);
	текИБ.УстановитьПривилегированныйРежим(Истина);
	Попытка
		текИБ.Константы.ЗаголовокСистемы.Установить(СтрокаЗаголовка);
	Исключение
		Сообщить("### При установке заголовки программы: " + ОписаниеОшибки());
	КонецПопытки;
	Попытка
		текИБ.БлокировкаРаботыСВнешнимиРесурсами.ЗапретитьРаботуСВнешнимиРесурсами();
	Исключение
		Сообщить("### Попытка установить ""Это копия ИБ"": " + ОписаниеОшибки());
	КонецПопытки;
	ЭтоУАТ = (НРег(Лев(СтруктураПараметров.ИБ, 6)) = "mc_uat");
	Для Каждого ИмяПодрядчика Из СтруктураПараметров.Подрядчики Цикл
		ПользовательБД = текИБ.ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПодрядчика);
		Если ПользовательБД = Неопределено Тогда
			Сообщить("### Пользователь " + ИмяПодрядчика + " в ИБ " + СтруктураПараметров.ИБ + " не найден");
		Иначе
			РольПолныеПрава = ?(ЭтоУАТ, текИБ.Метаданные.Роли.уатАдминистратор, текИБ.Метаданные.Роли.ПолныеПрава);
			Если Неопределено = ПользовательБД Тогда
				Сообщить("В списке пользователей <<" + СокрЛП(ИмяПодрядчика) + ">> не найден");
				Продолжить;
			Иначе
				Если УбратьПолныеПрава Тогда
					Если ПользовательБД.Роли.Содержит(РольПолныеПрава) Тогда
						ПользовательБД.Роли.Удалить(РольПолныеПрава);
						ПользовательБД.Записать();
					КонецЕсли;
				Иначе
					Если НЕ ПользовательБД.Роли.Содержит(РольПолныеПрава) Тогда
						ПользовательБД.Роли.Добавить(РольПолныеПрава);
						ПользовательБД.Записать();
					КонецЕсли;
				КонецЕсли;
				Сообщить("> " + ПользовательБД.Имя + " " + ?(УбратьПолныеПрава, "- ", "+ ") + РольПолныеПрава);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	текИБ.УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ПолучитьСоединение(СтруктураПараметров)
	КО = Новый COMObject("V83.COMConnector");
	СтрокаСоединения = "Srvr=""" + СтруктураПараметров.Сервер + """;Ref=""" + СтруктураПараметров.ИБ + """;Usr=""" + СтруктураПараметров.Имя + """;Pwd=""" + СтруктураПараметров.Пароль + """;";
	Сообщить("COM соединение с ИБ " + СтруктураПараметров.ИБ + "....");
	connection = КО.Connect(СтрокаСоединения);
	Возврат connection;
КонецФункции

//************************************************************//
имяФайлаПодрядчиков = ОбъединитьПути(ТекущийСценарий().Каталог, "ibs.json");
//Сообщить("Имя файла параметров: " + имяФайлаПодрядчиков);
УбратьПолныеПрава = Ложь;
Отказ = Ложь;
Параметры = ПрочитатьПараметры(Отказ);
ПредоставитьПолныеПрава(Параметры, Отказ);
Если Отказ Тогда
	Сообщить("Неуспешное завершение скрипта");
КонецЕсли;
ЗавершитьРаботу(0);
