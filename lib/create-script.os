#!/progra~2/OneScript/bin/oscript.exe -cgi -encoding=utf8
//*/
// Файл располагается на сервере [obr-mdb-01](http://jj) в каталоге
// C:\wamp\bin\apache\apache2.2.22\cgi-bin
//*/
// тудушечки:
// TODO: [1.5] оставить логику работу в скрипте, остальное унести в общую библиотеку
// vTODO: [1.2] переключение созданной тестовой базы в режим простого восстановления
// vTODO: [1.4] оформить как библиотэку к cgi-модулю
// vTODO: [1.2] модуль для еженочных регламентированных заданий
//            oscript create-script.os mc_bnu-tst | sqlcmd.exe
//            oscript create-script.os zupCorp corp_kzp | sqlcmd.exe

Перем сзПараметры;
Перем текстСкрипта;
Перем логФайл;

Функция Версия() Экспорт
  Возврат "1.4.2";
КонецФункции // Версия()

Процедура Инициализация()
  СИ = Новый СистемнаяИнформация;
  Скрипт = Новый Файл(ТекущийСценарий().Источник);
  Проект = Новый Файл(Скрипт.Путь).Имя;
  УстановитьТекущийКаталог(Скрипт.Путь+"\..\..");
  
  ЛогФайл = Новый Файл(?(ПроверитьНаличиеКаталога("log"), "log", Скрипт.Путь)+"\"+ВРег(Проект)+".log");
  ДописатьВЛогФайл("-- 1Scr вер. " +СИ.Версия+"  -----[  "+Скрипт.ИмяБезРасширения+"  ]----- вер. "+Версия());
  ДописатьВЛогФайл("-- Проект:    "+Проект+" (http://git.moscollector.local/vsuh/testIB-restore-sql.git)");
  ДописатьВЛогФайл("-- параметры: "+МассивВСтроку(АргументыКоманднойСтроки));
  ДописатьВЛогФайл("-- лог. файл: "+ЛогФайл.ПолноеИмя);
  Если АргументыКоманднойСтроки.Количество() < 2
    Или АргументыКоманднойСтроки.Количество()> 3 Тогда
    ДописатьВЛогФайл("ERR: Неверное количество арументов передано: "+АргументыКоманднойСтроки.Количество()+" ");
    Помощь();
  КонецЕсли;
  сзПараметры = Новый Структура("NET_BAK_ADR,TST_BN,SQL_BN,STOPAT,BAK_PATH_ROOT,RESTORE_PATH,RESTORE_LOG_PATH,fileSETtable,logSETtable,lastBAKfileDate"
  , "\\192.168.3.56\backup"
  , АргументыКоманднойСтроки[0]
  , АргументыКоманднойСтроки[1]
  , Неопределено
  , "J:\backup"
  , "E:\db"
  , "T:\log"
);

сзПараметры["STOPAT"] = НачалоЧаса(ТекущаяДата());

Если Не ОбеспечитьПодключениеККаталогуБэкапов(сзПараметры.NET_BAK_ADR) Тогда
  ЗавершитьРаботу(6);
КонецЕсли;
сзПараметры.fileSETtable = СформироватьТаблицуФайловБэкапа();
сзПараметры.logSETtable = СформироватьТаблицуТранзЛогов();

КонецПроцедуры // Инициализация()

Функция ПроверитьНаличиеКаталога(Знач Каталог)
  Файл = Новый Файл(Каталог);
  Если НЕ Файл.Существует() Тогда
    Возврат Ложь;
  ИначеЕсли Не Файл.ЭтоКаталог() Тогда
    Возврат Ложь;
  КонецЕсли;
  Возврат Истина;
КонецФункции

Функция ОбеспечитьПодключениеККаталогуБэкапов(КаталогБэкапов)
  КаталогБэкаповИБ = КаталогБэкапов+"\"+сзПараметры.SQL_BN;
  Если ПроверитьНаличиеКаталога(КаталогБэкаповИБ) Тогда
    Возврат Истина;
  КонецЕсли;
  
  ПараметрыПодключения = Новый Массив;
//  ПараметрыПодключения.Добавить("c:\Windows\System32\cmd.exe /C");
  ПараметрыПодключения.Добавить("cmd.exe /C");
  ПараметрыПодключения.Добавить("net use");
  ПараметрыПодключения.Добавить(КаталогБэкапов);
  ПараметрыПодключения.Добавить("8785623S");
  ПараметрыПодключения.Добавить("/user:moscollector\sukhikh");
//  ЗапуститьИПодождать(ПараметрыПодключения);
  ДописатьВЛогФайл("Проверка наличия/доступности каталога бэкапов ("+КаталогБэкаповИБ+"): "+ПроверитьНаличиеКаталога(КаталогБэкаповИБ));
  Возврат ПроверитьНаличиеКаталога(КаталогБэкаповИБ);
КонецФункции

Процедура Помощь()
  Сообщить("
  |Требуются два или три аргумента передано "+АргументыКоманднойСтроки.Количество()+":
  | 1. Имя восстанавливаемой базы (тестовой)
  | 2. Имя оригинальной базы - источник бэкапа
  | 3. Имя файла скрипта (необязательный)
  | Если имя скрипта не указано, скрипт выводится на экран
  |");
  ЗавершитьРаботу(3);
КонецПроцедуры

Функция МассивВСтроку(Знач МассивСтрок, Разделитель = " ") Экспорт
  Результат = "";
  Для Каждого нн Из МассивСтрок Цикл
    Результат = Результат + СокрЛП(нн) + Разделитель;
  КонецЦикла;
  Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
  Возврат Результат;
КонецФункции

Функция ЗапуститьИПодождать(Параметры)
  СтрокаЗапуска = "";
  Для Каждого Параметр Из Параметры Цикл
    СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
  КонецЦикла;
  Сообщить("Выполняем: "+Символы.ПС+"[["+СокрЛП(СтрокаЗапуска)+"]]");
  КодВозврата = 0;
  ЗапуститьПриложение(СокрЛП(СтрокаЗапуска), , Истина, КодВозврата);
  Возврат КодВозврата;
КонецФункции

Функция СформироватьТаблицуТранзЛогов(ТочкаВосстановления = '00010101')
  Перем текстБлока, ИБ;
  ИБ = сзПараметры.SQL_BN;
  времТаблица = Новый ТаблицаЗначений;
  времТаблица.Колонки.Добавить("ИБ");
  времТаблица.Колонки.Добавить("ВремяИзменения");
  Сообщить("" + сзПараметры.NET_BAK_ADR + "\" + ИБ + "*.trn");
  масЛоги = НайтиФайлы(сзПараметры.NET_BAK_ADR+"\"+ИБ , "*.trn");
  ВремяПоследнегоБэкапа = сзПараметры.lastBAKfileDate;
  Для каждого фл Из масЛоги Цикл
    ВремяЛога = фл.ПолучитьВремяИзменения();

    //сообщить(фл.Имя+ "  "+фл.ПолучитьВремяИзменения()+" [" + ВремяПоследнегоБэкапа + "]");

    Если ВремяЛога > ВремяПоследнегоБэкапа
      И ( сзПараметры.STOPAT = Неопределено
      Или ВремяЛога <= сзПараметры.STOPAT )
      Тогда
      свт = времТаблица.Добавить();
      свт.ИБ = фл.Имя;
      свт.ВремяИзменения = фл.ПолучитьВремяИзменения();
    КонецЕсли;
  КонецЦикла;
  времТаблица.Сортировать("ВремяИзменения");
  Для каждого стз Из времТаблица Цикл
    текстБлока = ""+текстБлока + Символы.ПС +  "INSERT INTO @l (fname, dt) VALUES ('"+стз.ИБ+"', '"+стз.ВремяИзменения+"')";
  КонецЦикла;
  
  Возврат текстБлока;
КонецФункции // СформироватьТаблицуТранзЛогов()

Функция СформироватьТаблицуФайловБэкапа()
  Перем текстБлока, ИБ;
  ИБ = сзПараметры.SQL_BN;
  времТаблица = Новый ТаблицаЗначений;
// здесь надо ОписаниеТипов() использовать вместо строки  Сообщить(времТаблица.Колонки);
  времТаблица.Колонки.Добавить("ИБ");
  времТаблица.Колонки.Добавить("ВремяИзменения");
  масБэкапы = НайтиФайлы(сзПараметры.NET_BAK_ADR+"\"+ИБ , "*.bak*");
  ВремяПолногоБэкапа = '00010101';
  Для каждого фл Из масБэкапы Цикл
    // сообщить(">>> "+фл.Имя+ "  "+фл.ПолучитьВремяИзменения()+" //"+ВРег(фл.Расширение)+"//");
    Если ВРег(фл.Расширение) = ".BAKFULL" Тогда
      ВремяПолногоБэкапа = МАКС(ВремяПолногоБэкапа, фл.ПолучитьВремяИзменения());
      свт = времТаблица.Добавить();
      свт.ИБ = фл.Имя;
      свт.ВремяИзменения = фл.ПолучитьВремяИзменения();
    КонецЕсли;
  КонецЦикла;
  времТаблица.Сортировать("ВремяИзменения");
  //   Для каждого стз Из времТаблица Цикл
  //     Сообщить(стз.ИБ+"  "+стз.ВремяИзменения);
  //   КонецЦикла;
  // Сообщить("--------------------------------------------");
  ЧислоСтрокВтз = времТаблица.Количество();
  Для нн = 1 По ЧислоСтрокВтз-1 Цикл
    времТаблица.Удалить(ЧислоСтрокВтз-нн-1);
  КонецЦикла;
  
  
  // остальные файлы:
  Для каждого фл Из масБэкапы Цикл
    ВремяЛога = фл.ПолучитьВремяИзменения();
    Если ВРег(фл.Расширение) = ".BAK"
      И  ВремяЛога > ВремяПолногоБэкапа
      И ( сзПараметры.STOPAT = Неопределено Или ВремяЛога <= сзПараметры.STOPAT )
      Тогда
      свт = времТаблица.Добавить();
      свт.ИБ = фл.Имя;
      свт.ВремяИзменения = фл.ПолучитьВремяИзменения();
    КонецЕсли;
  КонецЦикла;
  времТаблица.Сортировать("ВремяИзменения");
  
  Для каждого стз Из времТаблица Цикл
    текстБлока = ""+текстБлока + Символы.ПС +  "INSERT INTO @t (fname, dt) VALUES ('"+стз.ИБ+"', '"+стз.ВремяИзменения+"')";
    сзПараметры.lastBAKfileDate = стз.ВремяИзменения;
  КонецЦикла;
  
  Возврат текстБлока;
КонецФункции // СформироватьТаблицуФайловБэкапа()

Функция ЗаменитьТегиВТекстеСкрипта()
  текст = текстСкрипта;
  ВыражениеСтопАт =?(сзПараметры.STOPAT = Неопределено
  , ""
  ,", STOPAT = ''"
  + СтрЗаменить(Год(сзПараметры.STOPAT), Символы.НПП,"")+"-"
  + Прав("00"+Месяц(сзПараметры.STOPAT), 2)+"-"
  + Прав("00"+День(сзПараметры.STOPAT), 2)+"T"
  + Прав("00"+Час(сзПараметры.STOPAT), 2)+":"
  + Прав("00"+Минута(сзПараметры.STOPAT), 2)+":00.000"
  +"''");
  текст = СтрЗаменить(текст, "##$STOPAT_CLAUSE$##", ВыражениеСтопАт);
  текст = СтрЗаменить(текст, "##$SQL_BN$##", сзПараметры["SQL_BN"]);
  текст = СтрЗаменить(текст, "##$TST_BN$##", сзПараметры["TST_BN"]);
  текст = СтрЗаменить(текст, "##$BAK_PATH_ROOT$##", сзПараметры["BAK_PATH_ROOT"]);
  текст = СтрЗаменить(текст, "##$RESTORE_PATH$##", сзПараметры["RESTORE_PATH"]);
  текст = СтрЗаменить(текст, "##$RESTORE_LOG_PATH$##", сзПараметры["RESTORE_LOG_PATH"]);
  текст = СтрЗаменить(текст, "##$fileSETtable$##", сзПараметры["fileSETtable"]);
  текст = СтрЗаменить(текст, "##$logSETtable$##", сзПараметры["logSETtable"]);
  Возврат текст;
КонецФункции // ЗаменитьТегиВТекстеСкрипта()

Процедура ОтобразитьТекстСкрипта(текст)
  Если АргументыКоманднойСтроки.Количество() = 3 Тогда
    ТекстСкрипта = Новый ЗаписьТекста(АргументыКоманднойСтроки[2], "cp866");
    ТекстСкрипта.Записать(текст);
    ТекстСкрипта.Закрыть();
    //Сообщить(текст);
    ДописатьВЛогФайл("-- Создание скрипта выполнено (записан в файл "+АргументыКоманднойСтроки[2]+")")
  Иначе
    Сообщить(текст);
    ДописатьВЛогФайл("-- Создание скрипта выполнено (на экран)")
  КонецЕсли;
КонецПроцедуры

Процедура ДописатьВЛогФайл(СтрокаВЛогФайл, Уровень = 0)
  Если ПустаяСтрока(СтрокаВЛогФайл) Тогда
    Возврат;
  КонецЕсли;
  
  Рапорт 	= Строка(ТекущаяДата()) +" ["+Уровень+"]"+ Символы.Таб + СтрокаВЛогФайл;
  Сообщить(""+Рапорт);
  
  Протокол = Новый ЗаписьТекста(ЛогФайл.ПолноеИмя, "utf-8",, Истина);
  Протокол.ЗаписатьСтроку(Рапорт);
  Протокол.Закрыть();
КонецПроцедуры


//*******************************************************
текстСкрипта = "
|USE [master]
|
|-- ##-->> table of backup filenames full and differecial backups only:
|DECLARE @t table (fname NVARCHAR(90), dt datetime)
|##$fileSETtable$##
|
|-- transaction log table
|DECLARE @l table (fname NVARCHAR(90), dt datetime)
|##$logSETtable$##
|
|-- ##-->> backup files path: (J:\backup)
|DECLARE @bakPath NVARCHAR(50)          = '##$BAK_PATH_ROOT$##\##$SQL_BN$##'
|
|-- ##-->> path to database RESTORE (e:\DB)
|DECLARE @restPath NVARCHAR(50)         = '##$RESTORE_PATH$##'
|
|-- ##-->> path to log RESTORE (f:\DBLogs)
|DECLARE @restLogPath NVARCHAR(50)      = '##$RESTORE_LOG_PATH$##'
|
|DECLARE @SQLString NVARCHAR(max)
|DECLARE @counter INT = 0
|DECLARE @backupfile NVARCHAR(90)
|DECLARE @backuplog NVARCHAR(90)
|DECLARE @dd datetime
|---------------------------------------------------------------------------
|
|IF DATABASEPROPERTY( N'##$TST_BN$##' , 'IsSingleUser') = 0 and DATABASEPROPERTY( N'##$TST_BN$##' , 'IsInLoad') = 0
|BEGIN
|ALTER DATABASE [##$TST_BN$##]
|SET
|	SINGLE_USER
|	WITH ROLLBACK IMMEDIATE
|END
|
|
|DECLARE bkf CURSOR LOCAL FAST_FORWARD FOR SELECT * FROM @t;
|
|OPEN bkf;
|FETCH bkf INTO @backupfile, @dd
|WHILE @@FETCH_STATUS=0
|  BEGIN
|    IF @counter = 0
|      BEGIN
|       SET @SQLString = 'RESTORE Database [##$TST_BN$##]
|         FROM DISK = '''+@bakPath + '\' + @backupfile + '''
|       with NORECOVERY, REPLACE,
|       move ''##$SQL_BN$##'' to '''+@restPath + '\##$TST_BN$##.mdf'',
|       move ''##$SQL_BN$##_log'' to '''+@restLogPath + '\##$TST_BN$##_Log.ldf'',
|       STATS = 20'
|      END
|    ELSE
|      BEGIN
|        set @SQLString = 'RESTORE Database [##$TST_BN$##]
|          FROM DISK = '''+@bakPath + '\' + @backupfile + '''
|          with NORECOVERY ##$STOPAT_CLAUSE$##;'
|      END
|     PRINT @backupfile;
|     exec sp_executesql @SQLString
|     set @counter = @counter + 1
|     FETCH bkf INTO @backupfile, @dd;
|    END;
|CLOSE bkf;
|DEALLOCATE bkf;
|-- transaction logs
|set @counter = 0
|DECLARE bkl CURSOR LOCAL FAST_FORWARD FOR SELECT * FROM @l;
|
|OPEN bkl;
|FETCH bkl INTO @backuplog, @dd
|WHILE @@FETCH_STATUS=0
|BEGIN
| SET @SQLString = 'RESTORE LOG [##$TST_BN$##]
|	  FROM DISK = '''+@bakPath + '\' + @backuplog + '''
|	  WITH FILE = 1, NORECOVERY, NOUNLOAD , REPLACE, STATS = 20 ##$STOPAT_CLAUSE$##;'
|
|     PRINT @backuplog;
|     exec sp_executesql @SQLString
|     set @counter = @counter + 1
|     FETCH bkl INTO @backuplog, @dd;
|END;
|CLOSE bkl;
|DEALLOCATE bkl;
|-----------------------------------------------------------------------------------
|set @SQLString = 'RESTORE Database [##$TST_BN$##] with RECOVERY'
|exec sp_executesql @SQLString
|
|If DATABASEPROPERTY( N'##$TST_BN$##' , 'IsSingleUser') = 1 and DATABASEPROPERTY( N'##$TST_BN$##' , 'IsInLoad') = 0
|BEGIN
|ALTER DATABASE [##$TST_BN$##]
|SET
|	MULTI_USER
|END
|
|-- меняем модель восстановления базы на простую
|ALTER DATABASE [##$TST_BN$##]
|SET
|	RECOVERY SIMPLE
|
|-- Изменяем логическое имя перемещенного файла
|If DATABASEPROPERTY( N'##$TST_BN$##' , 'IsInLoad') = 0
| BEGIN
|   ALTER DATABASE [##$TST_BN$##]
|   MODIFY FILE ( NAME = N'##$SQL_BN$##', NEWNAME = N'##$TST_BN$##' );
|END
|
|-- Изменяем логическое имя перемещенного файла
|If DATABASEPROPERTY( N'##$TST_BN$##' , 'IsInLoad') = 0
| BEGIN
|   ALTER DATABASE [##$TST_BN$##]
|   MODIFY FILE ( NAME = N'##$SQL_BN$##_log', NEWNAME = N'##$TST_BN$##_log' );
|END
|GO
|
|-- Урезаем размер лога для тестовой базы простой модели восстановления
|USE [##$TST_BN$##]
|DBCC SHRINKFILE (N'##$TST_BN$##_log' , 10, TRUNCATEONLY)
|GO
|
|";

Инициализация();
ОтобразитьТекстСкрипта(ЗаменитьТегиВТекстеСкрипта());
